{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport { ENDPOINT, access_token } from \"../../utils/globals\";\nexport const addToCart = book => {\n  console.log(\"actionTypes.ADD_TO_CART\", actionTypes.ADD_TO_CART);\n  return {\n    type: actionTypes.ADD_TO_CART,\n    payload: book\n  };\n};\nexport const getListBook = () => {\n  const request = axios.get(`${ENDPOINT}/book/findAll`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n  return dispatch => {\n    request.then(response => {\n      console.log(response);\n      return dispatch({\n        type: actionTypes.GET_BOOK,\n        payload: response.data\n      });\n    });\n  };\n}; // get book by id\n\nexport const getBookById = id => {\n  // http request\n  const request = axios.get(`${ENDPOINT}/book/findById/${id}`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  }); // redux thunk untuk dispatch\n\n  return dispatch => {\n    request.then(response => {\n      return dispatch({\n        type: actionTypes.GET_BOOK_BY_ID,\n        payload: response.data\n      });\n    });\n  };\n};\nexport const updateBook = data => {\n  const request = axios.post(`${ENDPOINT}/book/update`, data, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n  return dispatch => {\n    request.then(response => {\n      dispatch({\n        type: actionTypes.UPDATE_BOOK,\n        payload: response.data\n      });\n      return dispatch(getListBook());\n    });\n  };\n};\nexport const deleteBook = id => {\n  const request = axios.delete(`${ENDPOINT}/book/deleteById/${id}`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n  return dispatch => {\n    request.then(response => {\n      dispatch({\n        type: actionTypes.DELETE_BOOK,\n        payload: response.data\n      });\n    });\n    return dispatch(getListBook());\n  };\n};","map":{"version":3,"sources":["/home/kemosabe/Documents/sekolahfullstack/react/projectNext/src/redux/action/globalActionType.js"],"names":["actionTypes","axios","ENDPOINT","access_token","addToCart","book","console","log","ADD_TO_CART","type","payload","getListBook","request","get","headers","Authorization","dispatch","then","response","GET_BOOK","data","getBookById","id","GET_BOOK_BY_ID","updateBook","post","UPDATE_BOOK","deleteBook","delete","DELETE_BOOK"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport { ENDPOINT, access_token } from \"../../utils/globals\";\n\nexport const addToCart = (book) => {\n  console.log(\"actionTypes.ADD_TO_CART\", actionTypes.ADD_TO_CART);\n  return {\n    type: actionTypes.ADD_TO_CART,\n    payload: book,\n  };\n};\n\nexport const getListBook = () => {\n  const request = axios.get(`${ENDPOINT}/book/findAll`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n\n  return (dispatch) => {\n    request.then((response) => {\n      console.log(response);\n      return dispatch({\n        type: actionTypes.GET_BOOK,\n        payload: response.data,\n      });\n    });\n  };\n};\n\n// get book by id\nexport const getBookById = (id) => {\n  // http request\n  const request = axios.get(`${ENDPOINT}/book/findById/${id}`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n\n  // redux thunk untuk dispatch\n  return (dispatch) => {\n    request.then((response) => {\n      return dispatch({\n        type: actionTypes.GET_BOOK_BY_ID,\n        payload: response.data,\n      });\n    });\n  };\n};\n\nexport const updateBook = (data) => {\n  const request = axios.post(`${ENDPOINT}/book/update`, data, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n\n  return (dispatch) => {\n    request.then((response) => {\n      dispatch({\n        type: actionTypes.UPDATE_BOOK,\n        payload: response.data,\n      });\n\n      return dispatch(getListBook());\n    });\n  };\n};\n\nexport const deleteBook = (id) => {\n  const request = axios.delete(`${ENDPOINT}/book/deleteById/${id}`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n\n  return (dispatch) => {\n    request.then((response) => {\n      dispatch({\n        type: actionTypes.DELETE_BOOK,\n        payload: response.data,\n      });\n    });\n\n    return dispatch(getListBook());\n  };\n};\n"]},"metadata":{},"sourceType":"module"}